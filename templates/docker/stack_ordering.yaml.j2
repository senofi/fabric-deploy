version: "3.6"
services:
{% for zk in msp.zks %}
  [[ zk.zk ]]:
    networks:
      - [[ msp.network ]]{% if zk.labels is defined %}
    deploy:
      placement:
        constraints:
{% for label in zk.labels %}
          - [[ label ]]{% endfor %}{% endif %}
    image: hyperledger/fabric-zookeeper
    environment:
      - ZOO_MY_ID=[[ loop.index - 1 ]]
      - ZOO_SERVERS={% for zki in msp.zks %}server.[[ loop.index - 1 ]]={% if zk.zk == zki.zk %}0.0.0.0{% else %}[[ zki.zk ]]{% endif %}:2888:3888{% if not loop.last %} {% endif %}{% endfor %}
    ports:
      - 2888
      - 3888
      - {% if zk.port is defined %}[[ zk.port ]]:2181{% else %}2181{% endif %}
{% endfor %}

{% for kafka in msp.kafkas %}
  [[ kafka.kafka ]]:
    networks:
      - [[ msp.network ]]{% if kafka.labels is defined %}
    deploy:
      placement:
        constraints:
{% for label in kafka.labels %}
          - [[ label ]]{% endfor %}{% endif %}
    image: hyperledger/fabric-kafka
    environment:
      - KAFKA_LOG_RETENTION_MS=-1
      - KAFKA_MESSAGE_MAX_BYTES=103809024
      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
      - KAFKA_BROKER_ID=[[ loop.index ]]
      - KAFKA_ZOOKEEPER_CONNECT={% for zk in msp.zks %}[[ zk.zk ]]:2181{% if not loop.last %},{% endif %}{% endfor %}
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS=36000
    ports:
      - {% if kafka.ext_port is defined %}[[ kafka.ext_port ]]:9092{% else %}9092{% endif %}
{% endfor %}

{% for orderer in msp.orderers %}
  [[ orderer.orderer ]]:
    networks:
      - [[ msp.network ]]
    {% if orderer.labels is defined %}
    deploy:
      placement:
        constraints:
{% for label in orderer.labels %}
          - [[ label ]]{% endfor %}{% endif %}
    image: hyperledger/fabric-orderer{% if fab_img_tag is defined %}:[[ fab_img_tag ]]{% endif %}
    environment:
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${STACK}_[[ msp.network ]]
      - FABRIC_LOGGING_SPEC=[[ msp.log_level ]]
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=[[ msp.msp ]]
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/key.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/cert.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - CONFIGTX_ORDERER_ORDERERTYPE=[[ msp.type ]]
      - CONFIGTX_ORDERER_KAFKA_BROKERS=[{% for kafka in msp.kafkas %}[[ kafka.kafka ]]:9092{% if not loop.last %},{% endif %}{% endfor %}]
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
      - ORDERER_KAFKA_VERBOSE=true
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
    - [[ config_folder ]]/configtx_[[ msp.msp ]]/genesis_[[ msp.msp ]].block:/var/hyperledger/orderer/orderer.genesis.block
    - [[ local_pki_folder ]]/[[ msp.domain ]]/orderers/[[ orderer.orderer ]]/msp:/var/hyperledger/orderer/msp
    - [[ local_pki_folder ]]/[[ msp.domain ]]/orderers/[[ orderer.orderer ]]/tls/:/var/hyperledger/orderer/tls
    ports:
      - [[ orderer.port ]]:7050

{% endfor %}

networks:
  [[ msp.network ]]:
    driver: overlay
    attachable: true
    ipam:
      driver: default
      config:
        - subnet: [[ msp.subnet_cidr ]]
